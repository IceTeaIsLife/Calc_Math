package ru.mirea.intro.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ru.mirea.intro.dao.BookDao;
import ru.mirea.intro.dao.RequestDAO;
import ru.mirea.intro.dao.repository.RequestRepository;
import ru.mirea.intro.exception.NoSuchRequest;
import ru.mirea.intro.mapper.RequestMapper;
import ru.mirea.intro.service.TestService;
import ru.mirea.intro.service.model.Request;
import ru.mirea.intro.web.to.RequestDto;

import java.util.Optional;

@Service
public class TestServiceImpl implements TestService {
    @Autowired
    RequestRepository requestRepository;

    @Override
    public Request testServiceGetMethod(Long id) throws NoSuchRequest {
        Optional<RequestDAO> requestDAO = requestRepository.findById(id);
        if (requestDAO.isPresent()) {
            return RequestMapper.REQUEST_MAPPER.requestDAOToRequest(requestDAO.get());
        }
        throw new NoSuchRequest();
    }

    @Override
    public Request testServicePostMethod(Request request) {
        RequestDAO requestDAO = RequestMapper.REQUEST_MAPPER.requestToRequestDAO(request);
        requestDAO.getBookDaoList().forEach(bookDao -> bookDao.setRequestDao(requestDAO));
//        for (BookDao bookDao : requestDAO.getBookDaoList()) {
//            bookDao.setRequestDao(requestDAO);
//        }
        System.out.println(requestRepository.save(requestDAO));
        return RequestMapper.REQUEST_MAPPER.requestDAOToRequest(requestDAO);
    }

    @Override
    public String testServiceDeleteMethod(Long id) throws NoSuchRequest{
        if (requestRepository.existsById(id)){
            requestRepository.deleteById(id);
            return "Removal is successful!";
        }
        throw new NoSuchRequest();
    }

    @Override
    public Request testServicePutMethod(Request request) throws NoSuchRequest {
        RequestDAO requestDAOToPut = RequestMapper.REQUEST_MAPPER.requestToRequestDAO(request);
        Long id = requestDAOToPut.getId();
        if (requestRepository.existsById(id))
        {
            requestDAOToPut.getBookDaoList().forEach(bookDao -> bookDao.setRequestDao(requestDAOToPut));
            requestRepository.save(requestDAOToPut);
            return RequestMapper.REQUEST_MAPPER.requestDAOToRequest(requestDAOToPut);
        }
        else throw new NoSuchRequest();
    }
}



package ru.mirea.intro.service;

import ru.mirea.intro.exception.NoSuchRequest;
import ru.mirea.intro.service.model.Request;
import ru.mirea.intro.web.to.RequestDto;

public interface TestService {
    Request testServiceGetMethod(Long id) throws NoSuchRequest;

    Request testServicePostMethod(Request request);

    String testServiceDeleteMethod(Long id) throws NoSuchRequest;

    Request testServicePutMethod(Request request) throws NoSuchRequest;
}














package ru.mirea.intro.web.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.mirea.intro.exception.NoSuchRequest;
import ru.mirea.intro.mapper.RequestMapper;
import ru.mirea.intro.service.TestService;
import ru.mirea.intro.service.model.Request;
import ru.mirea.intro.web.to.Meta;
import ru.mirea.intro.web.to.RequestDto;
import ru.mirea.intro.web.to.Response;

import java.util.Optional;

@RestController
@RequestMapping("api/mirea")
@Api(tags="Методы для тестирования приложения")
public class MireaController {
    private final TestService testService;

    public MireaController(TestService testService) {
        this.testService = testService;
    }

    @PostMapping("/post-method")
    @ApiOperation(value = "POST-метод тестового веб-сервиса",  notes = "Отправление POST-запроса")
            //"\nВходные параметры:\n - RequestDto requestDto\n - Optional<String> optionalStringValue")
    public ResponseEntity<Response<RequestDto>> postMethod(@ApiParam(value = "Тело запроса - список книг и значение типа String", required = true)
                                                           @RequestBody RequestDto requestDto,
                                                       @ApiParam(value = "Опциональный параметр", required = false)
                                                       @RequestParam Optional<String> optionalStringValue) {
        try {
            Request request = RequestMapper.REQUEST_MAPPER.requestDTOToRequest(requestDto);
            RequestDto requestDtoOut = RequestMapper.REQUEST_MAPPER.requestToRequestDto(testService.testServicePostMethod(request));
            return new ResponseEntity<>(new Response<>(new Meta(0, "All good!"), requestDtoOut), HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(new Response<>(new Meta(1, e.toString()), null), HttpStatus.CONFLICT);
        }
    }

    @GetMapping("/get-method")
    @ApiOperation(value = "GET-метод тестового веб-сервиса",  notes = "Отправление GET-запроса")
            //"\nВходные параметры:\n - Long id")
    public ResponseEntity<Response<RequestDto>> getMethod(@ApiParam(value = "Id запроса в базе данных", required = true)
                                                            @RequestParam Long id) {
        try {
            Request request = testService.testServiceGetMethod(id);
            RequestDto requestDto = RequestMapper.REQUEST_MAPPER.requestToRequestDto(request);
            return new ResponseEntity<>(new Response<>(new Meta(0, "All good!"), requestDto), HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(new Response<>(new Meta(1, e.toString()), null), HttpStatus.CONFLICT);
        }
    }

    @DeleteMapping("/delete-method")
    @ApiOperation(value = "DELETE-метод тестового веб-сервиса",  notes = "Отправление DELETE-запроса")
            //"\nВходные параметры:\n - Long id")
    public ResponseEntity<Response<String>> deleteMethod(@ApiParam(value = "Id запроса в базе данных", required = true)
                                                             @RequestParam Long id)
    {
        try{
            String testServiceResponse = testService.testServiceDeleteMethod(id);
            return new ResponseEntity<>(new Response<>(new Meta(0, "All good!"), testServiceResponse), HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(new Response<>(new Meta(1, e.toString()), null), HttpStatus.NOT_FOUND);
        }
    }

    @PutMapping("/put-method")
    @ApiOperation(value = "PUT-метод тестового веб-сервиса",  notes = "Отправление PUT-запроса")
            //"\nВходные параметры:\n - RequestDto requestDto")
    public ResponseEntity<Response<RequestDto>> putMethod(@ApiParam(value = "Тело запроса - список книг и значение типа String", required = true)
                                                          @RequestBody RequestDto requestDto)
    {
        try{

            Request request = RequestMapper.REQUEST_MAPPER.requestDTOToRequest(requestDto);
            RequestDto requestDtoOut = RequestMapper.REQUEST_MAPPER.requestToRequestDto(testService.testServicePutMethod(request));
            return new ResponseEntity<>(new Response<>(new Meta(0, "All good!"), requestDtoOut), HttpStatus.OK);
        }
        catch (Exception e){
            return new ResponseEntity<>(new Response<>(new Meta(1, e.toString()), null), HttpStatus.NOT_FOUND);
        }
    }

}





